'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var getDisplayName = _interopDefault(require('react-display-name'));
var hoistStatics = _interopDefault(require('hoist-non-react-statics'));

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function capitalize(string) {
  string = string.toLowerCase();
  return string.charAt(0).toUpperCase() + string.substring(1);
}

function createWithContext(Context, name) {
  return function withContext(ComposedComponent) {
    var WithContextWrapper = function WithContextWrapper(props) {
      return React.createElement(ComposedComponent, _extends({}, _defineProperty({}, name, React.useContext(Context)), props));
    };

    WithContextWrapper.displayName = "with".concat(capitalize(name), "Context(").concat(getDisplayName(ComposedComponent), ")");
    return hoistStatics(WithContextWrapper, ComposedComponent);
  };
}

exports.default = createWithContext;
